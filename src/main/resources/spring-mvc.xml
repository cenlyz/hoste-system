<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
	
	
	  <!-- 配置session拦截器-->
	 <mvc:interceptors>
	 	<mvc:interceptor>
<!-- 	 		拦截路径对象 -->
	 		<mvc:mapping path="/**"/>
<!-- 	 		不拦截对象 -->
	 		<mvc:exclude-mapping path="/toLogin.do"/>
	 		<mvc:exclude-mapping path="/login.do"/>
	 		<mvc:exclude-mapping path="/checkcode.do"/>
	 		<mvc:exclude-mapping path="/regist.do"/>
	 		<mvc:exclude-mapping path="/find_pw.do"/>
	 		<mvc:exclude-mapping path="/findpw.do"/>
	 		<mvc:exclude-mapping path="/index.do"/>
	 		<mvc:exclude-mapping path="/index.jsp"/>
<!-- 	 		拦截器类到class -->
	 		<bean class="cn.lyz.hotle.login.interceptors.Sessioninterceptors"></bean>
	 	</mvc:interceptor>
	 </mvc:interceptors>
	 
	
	 
	
	<!-- 读取配置文件db.properties -->
	<util:properties id="cfg" location="classpath:config.properties"/>  
   <!--配置DruidDataSource连接池 -->
   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init" lazy-init="true">
		<property name="driverClassName" value="#{cfg.driver}" />
		<property name="url" value="#{cfg.url}" />
		<property name="username" value="#{cfg.username}" />
		<property name="password" value="#{cfg.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="#{cfg.initialSize}" />
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="#{cfg.maxActive}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="#{cfg.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="#{cfg.maxWait}" />
     </bean>

	
	
	
	<!-- 配置组建扫描 -->
	<context:component-scan base-package="cn.lyz.hotle"/>
	<!-- 配置MVC注解扫描 -->
	<mvc:annotation-driven/>
	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/page/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="dataSource" ref="dataSource"></property>
	   <property name="configLocation" value="classpath:mybatis-config.xml"></property>
	   <!-- 自动扫描mapping.xml文件 -->
	   <property name="mapperLocations" >
			<list>
			<value>classpath:mapper/*/*.xml</value>
			<value>classpath:cn/lyz/hotle/*/dao/*.xml</value>
			</list>
		</property>
	 </bean>
	
	
	
	
	
	<!-- 配置MapperScannerConfigurer -->
	<!-- 该bean会扫描指定包及其子包下面的所有的Mapper映射器（接口）
	然后生成符合该接口要求的对象（通过调用SqlSession的getMapper方法），接下来
	会将这些对象（即Mapper映射器的实现对象）添加到Spring容器里面
	（默认的id是首字母小写之后的接口名） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定要扫描的包 -->
		<property name="basePackage" value="cn.lyz.hotle.**.dao" />
		<!-- 指定只扫描带有该注解的接口 -->
<!-- 		<property name="annotationClass" value="cn.lyz.hotle.annotations.MyBatisRepository" /> -->
	</bean>
		
		
	
	
	
</beans>











